diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1af9bef..03484bd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,25 +5,55 @@ project(openssl VERSION 1.0.2 LANGUAGES C)
 include(CheckSymbolExists) 
 check_symbol_exists(_X86_ "Windows.h" _X86_)
 check_symbol_exists(_AMD64_ "Windows.h" _AMD64_)
+check_symbol_exists(_ARM_ "Windows.h" _ARM_)
 
 if(_X86_)
 	message(STATUS "Win32")
 	set(OPENSSL_PLATFORM VC-WIN32)
 	set(OPENSSL_GENERATE nasm)
+	set(OPENSSL_UWP_PLATFROM "Win32")
 elseif(_AMD64_)
 	message(STATUS "x64")
 	set(OPENSSL_PLATFORM VC-WIN64A)
 	set(OPENSSL_GENERATE win64a)
+	set(OPENSSL_UWP_PLATFROM "x64")
 else()
-  message(FATAL_ERROR "Unsupported target architecture")
+	if (NOT CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+		message(FATAL_ERROR "Unsupported target architecture")
+	endif()
+	message(STATUS "ARM")
+	set(OPENSSL_UWP_PLATFROM "arm")
 endif()
 
-message(STATUS "perl Configure ${OPENSSL_PLATFORM} enable-static-engine no-asm --prefix=${CMAKE_INSTALL_PREFIX}")
-execute_process(COMMAND perl Configure ${OPENSSL_PLATFORM} enable-static-engine no-asm --prefix=${CMAKE_INSTALL_PREFIX} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+if (CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+	set(OPENSSL_PLATFORM VC-WINUNIVERSAL)
+	set(OPENSSL_GENERATE winuniversal)
+	set(OPENSSL_PERL_ARGS "no-dso")
+else()
+	set(OPENSSL_PERL_ARGS "enable-static-engine")
+endif()
+
+message(STATUS "perl Configure ${OPENSSL_PLATFORM} enable-static-engine no-asm ${OPENSSL_PERL_ARGS} --prefix=${CMAKE_INSTALL_PREFIX}")
+execute_process(COMMAND perl Configure ${OPENSSL_PLATFORM} enable-static-engine no-asm ${OPENSSL_PERL_ARGS} --prefix=${CMAKE_INSTALL_PREFIX} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
 
 message(STATUS "ms/do_${OPENSSL_GENERATE}.bat")
 execute_process(COMMAND ms\\do_${OPENSSL_GENERATE}.bat WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
 
-add_custom_target(openssl ALL COMMAND nmake -f ms/ntdll.mak WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+if (CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+	add_custom_command(OUTPUT ${OPENSSL_GENERATE}.out
+		COMMAND ms/setVSvars.bat universal10.0${OPENSSL_UWP_PLATFROM} ${CMAKE_SYSTEM_VERSION}
+		COMMAND nmake -f ms/ntdll.mak 
+		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+		COMMENT "Compiling OpenSSL UWP"
+	)
+else()
+	add_custom_command(OUTPUT ${OPENSSL_GENERATE}.out
+		COMMAND nmake -f ms/ntdll.mak 
+		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+		COMMENT "Compiling OpenSSL"
+	)
+endif()
+
+add_custom_target(openssl ALL DEPENDS ${OPENSSL_GENERATE}.out)
 
 install(CODE "execute_process(COMMAND nmake -f ms/ntdll.mak install WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})")
diff --git a/ms/setVSvars.bat b/ms/setVSvars.bat
index 633e605..744d1a9 100644
--- a/ms/setVSvars.bat
+++ b/ms/setVSvars.bat
@@ -1,55 +1,35 @@
 @if NOT "%_DEBUG%" GEQ "1" @echo off
 pushd %~dp0\..
+set sdkVer=%2
+if "%sdkVer%"=="" set sdkVer=10.0.16299.0
 call:set_%1
 popd
 exit /b
 :set_universal10.0Win32
-	call:setVar _VS15VC VisualStudio15VC
-	if not "%_VS15VC%"=="" (
-		call "%_VS15VC%\vcvarsall" x86 store
-		call:setEnv
-		goto :eof
-	)
-	call:setVar _VS14VC VisualStudio14VC
-	call "%_VS14VC%vcvarsall" x86 store
-	call:setEnv
+    call:setUniversalVCVars x86
 	goto :eof
 
 :set_universal10.0x64
-	call:setVar _VS15VC VisualStudio15VC
-	if not "%_VS15VC%"=="" (
-		call "%_VS15VC%\vcvarsall" x64 store
-		call:setEnv
-		goto :eof
-	)
-	call:setVar _VS14VC VisualStudio14VC
-	call "%_VS14VC%vcvarsall" x64 store
-	call:setEnv
+    call:setUniversalVCVars x64
 	goto :eof
 
 :set_universal10.0arm
-	call:setVar _VS15VC VisualStudio15VC
-	if not "%_VS15VC%"=="" (
-		call "%_VS15VC%\vcvarsall" x86_arm store
-		rem
-		call:setEnv
-		goto :eof
-	)
-	call:setVar _VS14VC VisualStudio14VC
-    rem
-	call "%_VS14VC%vcvarsall" x86_arm store
-	call:setEnv
+    call:setUniversalVCVars x86_arm
 	goto :eof
 
 :set_universal10.0arm64
+    call:setUniversalVCVars x86_arm64
+	goto :eof
+
+:setUniversalVCVars
     call:setVar _VS15VC VisualStudio15VC
     if not "%_VS15VC%"=="" (
-		call "%_VS15VC%\vcvarsall" x86_arm64 store
+		call "%_VS15VC%\vcvarsall" %1 store %sdkVer%
 		call:setEnv
 		goto :eof
 	)
 	call:setVar _VS14VC VisualStudio14VC
-	call "%_VS14VC%vcvarsall" x86_arm64 store
+	call "%_VS14VC%vcvarsall" %1 store %sdkVer%
 	call:setEnv
 	goto :eof
 
@@ -211,14 +191,10 @@ exit /b
 	call:setVar _VS15VC VisualStudio15VC
 	call:setVar _WKITS10 WindowsKits10.0
 	call:setVar _WKITS10VER WindowsKits10Version
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.foundationcontract\3.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.foundationcontract\2.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.foundationcontract\1.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.universalapicontract\5.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.universalapicontract\4.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.universalapicontract\3.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.universalapicontract\2.0.0.0\
-	set LIBPATH=%LIBPATH%;%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.universalapicontract\1.0.0.0\
+	for /D %%f in ("%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.foundationcontract\*") do set LIBPATH=%LIBPATH%;%%f\
+	for /D %%f in ("%_WKITS10%\references\%_WKITS10VER%.0\windows.foundation.universalapicontract\*") do set LIBPATH=%LIBPATH%;%%f\
+	for /D %%f in ("%_WKITS10%\references\windows.foundation.foundationcontract\*") do set LIBPATH=%LIBPATH%;%%f\
+	for /D %%f in ("%_WKITS10%\references\windows.foundation.universalapicontract\*") do set LIBPATH=%LIBPATH%;%%f\	
 	goto :eof
 
 :end
diff --git a/ms/winrtdef.h b/ms/winrtdef.h
index 10235dd..8f07730 100644
--- a/ms/winrtdef.h
+++ b/ms/winrtdef.h
@@ -20,6 +20,8 @@
 # ifdef setenv
 #  undef setenv
 # endif
+#define getenv winrt_getenv
+#define setenv winrt_setenv
 
 /*
 # ifdef FindFirstFile
@@ -53,7 +55,7 @@ int winrt_GetTickCount(void);
 void* LoadLibraryA(
 	const char* lpFileName
   );
-char* getenv(const char* varname);
+char* winrt_getenv(const char* varname);
 int _kbhit();
 
 int MoveFile(
@@ -57,8 +57,8 @@ char* winrt_getenv(const char* varname);
 int _kbhit();
 
 int MoveFile(
-	const wchar_t* lpExistingFileName,
-	const wchar_t* lpNewFileName
+	_In_  LPCTSTR lpExistingFileName,
+	_In_  LPCTSTR lpNewFileName
 	);
 
 HMODULE
diff --git a/engines/e_aep.c b/engines/e_aep.c
index 66849f3..fbebdbd 100644
--- a/engines/e_aep.c
+++ b/engines/e_aep.c
@@ -69,7 +69,7 @@ typedef int pid_t;
 # define getpid GetThreadID
 extern int GetThreadID(void);
 #elif defined(_WIN32) && !defined(__WATCOMC__)
-# define getpid _getpid
+# define getpid GetCurrentProcessId
 #endif
 
 #include <openssl/crypto.h>
-- 
2.10.2.windows.1

